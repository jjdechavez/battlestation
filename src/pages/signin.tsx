import React from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { signIn } from 'next-auth/react';
import { DefaultValues, SubmitHandler, useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import clsx from 'clsx';
import messages from '../constants/messages/auth';
import Card from '../components/module/Card';

const SigninSchema = z.object({
  email: z.string().email({ message: 'Email is invalid' }),
  password: z.string(),
});

type SigninSchemaType = z.infer<typeof SigninSchema>;

const defaultValues: DefaultValues<SigninSchemaType> = {
  email: '',
  password: '',
};

const SigninPage: NextPage = () => {
  const router = useRouter();
  const [error, setError] = React.useState<null | string>(null);
  const methods = useForm<SigninSchemaType>({
    resolver: zodResolver(SigninSchema),
    defaultValues,
  });

  const { handleSubmit, register, formState } = methods;
  const { errors, isSubmitting } = formState;

  const onSubmit: SubmitHandler<SigninSchemaType> = async (data) => {
    setError(null);

    const signInResult = await signIn('credentials', {
      redirect: false,
      email: data.email,
      password: data.password,
    });

    if (!signInResult?.ok && signInResult?.status === 401) {
      setError(messages.signinUnauthorized);
    }

    if (signInResult?.ok) {
      const { query } = router;

      if (query?.from) {
        router.push(query.from as string);
      }
      router.push('/dashboard');
    }
  };

  return (
    <>
      <Head>
        <title>Sign In</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main
        id='content'
        role='main'
        className='container max-w-md min-h-screen flex flex-col items-center justify-center mx-auto p-6'
      >
        <Card>
          <div className='text-center'>
            <h1 className='block text-2xl font-bold text-gray-800'>Sign In</h1>
            <p className='mt-2 text-sm text-gray-600'>
              State you're name child
            </p>

            {error ? (
              <p className='text-red-600 text font-semibold'>{error}</p>
            ) : null}
          </div>

          <div className='mt-2 w-full'>
            <button
              type='button'
              className='text-white w-full bg-[#5865f2] hover:bg-[#5865f2]/90 focus:ring-4 focus:outline-none focus:ring-[#5865f2]/50 font-medium rounded-lg text-sm px-4 py-3 text-center inline-flex items-center justify-center dark:focus:ring-[#5865f2]/55'
              onClick={async () => {
                await signIn('discord', {
                  callbackUrl: router.query.from
                    ? (router.query.from as string)
                    : '/dashboard',
                });
              }}
            >
              <svg
                className='mr-2 -ml-2 w-8 h-4'
                aria-hidden='true'
                focusable='false'
                data-prefix='fab'
                data-icon='discord-f'
                role='img'
                xmlns='http://www.w3.org/2000/svg'
                viewBox='0 0 320 512'
              >
                <path
                  fill='currentColor'
                  d='M524.531,69.836a1.5,1.5,0,0,0-.764-.7A485.065,485.065,0,0,0,404.081,32.03a1.816,1.816,0,0,0-1.923.91,337.461,337.461,0,0,0-14.9,30.6,447.848,447.848,0,0,0-134.426,0,309.541,309.541,0,0,0-15.135-30.6,1.89,1.89,0,0,0-1.924-.91A483.689,483.689,0,0,0,116.085,69.137a1.712,1.712,0,0,0-.788.676C39.068,183.651,18.186,294.69,28.43,404.354a2.016,2.016,0,0,0,.765,1.375A487.666,487.666,0,0,0,176.02,479.918a1.9,1.9,0,0,0,2.063-.676A348.2,348.2,0,0,0,208.12,430.4a1.86,1.86,0,0,0-1.019-2.588,321.173,321.173,0,0,1-45.868-21.853,1.885,1.885,0,0,1-.185-3.126c3.082-2.309,6.166-4.711,9.109-7.137a1.819,1.819,0,0,1,1.9-.256c96.229,43.917,200.41,43.917,295.5,0a1.812,1.812,0,0,1,1.924.233c2.944,2.426,6.027,4.851,9.132,7.16a1.884,1.884,0,0,1-.162,3.126,301.407,301.407,0,0,1-45.89,21.83,1.875,1.875,0,0,0-1,2.611,391.055,391.055,0,0,0,30.014,48.815,1.864,1.864,0,0,0,2.063.7A486.048,486.048,0,0,0,610.7,405.729a1.882,1.882,0,0,0,.765-1.352C623.729,277.594,590.933,167.465,524.531,69.836ZM222.491,337.58c-28.972,0-52.844-26.587-52.844-59.239S193.056,219.1,222.491,219.1c29.665,0,53.306,26.82,52.843,59.239C275.334,310.993,251.924,337.58,222.491,337.58Zm195.38,0c-28.971,0-52.843-26.587-52.843-59.239S388.437,219.1,417.871,219.1c29.667,0,53.307,26.82,52.844,59.239C470.715,310.993,447.538,337.58,417.871,337.58Z'
                />
              </svg>
              Sign in with Discord
            </button>
          </div>

          <div className='inline-flex justify-center items-center w-full'>
            <hr className='my-8 w-64 h-px bg-gray-200 border-0' />
            <span className='absolute left-1/2 px-3 font-medium text-gray-600 bg-white -translate-x-1/2'>
              or
            </span>
          </div>

          <div className='mt-5'>
            <form onSubmit={handleSubmit(onSubmit)}>
              <div className='grid gap-y-4'>
                <div>
                  <label
                    htmlFor='email'
                    className="after:content-['*'] after:ml-0.5 after:text-red-500 block text-sm mb-2"
                  >
                    Email address
                  </label>
                  <div className='relative'>
                    <input
                      type='email'
                      id='email'
                      {...register('email')}
                      className={clsx(
                        errors?.email
                          ? 'border-red-500 text-red-600 focus:border-red-500 focus:ring-red-500'
                          : 'border-gray-200 focus:border-blue-500 focus:ring-blue-500',
                        'py-3 px-4 block w-full rounded-md text-sm disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none'
                      )}
                      disabled={isSubmitting}
                      aria-describedby='email-error'
                    />
                    <div
                      className={clsx(
                        errors?.email ? 'flex items-start' : 'hidden',
                        'absolute inset-y-0 right-0 flex items-center pointer-events-none pr-3'
                      )}
                    >
                      <svg
                        className='h-5 w-5 text-red-500'
                        width='16'
                        height='16'
                        fill='currentColor'
                        viewBox='0 0 16 16'
                        aria-hidden='true'
                      >
                        <path d='M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z' />
                      </svg>
                    </div>
                  </div>
                  <p
                    className={clsx(
                      errors?.email ? '' : 'hidden',
                      'text-xs text-red-600 mt-2'
                    )}
                    id='email-error'
                  >
                    {errors?.email?.message}
                  </p>
                </div>
                <div>
                  <label
                    htmlFor='password'
                    className="after:content-['*'] after:ml-0.5 after:text-red-500 block text-sm mb-2"
                  >
                    Password
                  </label>
                  <div className='relative'>
                    <input
                      type='password'
                      id='password'
                      {...register('password')}
                      className={clsx(
                        errors?.password
                          ? 'border-red-500 text-red-600 focus:border-red-500 focus:ring-red-500'
                          : 'border-gray-200 focus:border-blue-500 focus:ring-blue-500',
                        'py-3 px-4 block w-full rounded-md text-sm disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none'
                      )}
                      aria-describedby='password-error'
                      disabled={isSubmitting}
                    />
                    <div
                      className={clsx(
                        errors?.password ? 'flex items-start' : 'hidden',
                        'absolute inset-y-0 right-0 flex items-center pointer-events-none pr-3'
                      )}
                    >
                      <svg
                        className='h-5 w-5 text-red-500'
                        width='16'
                        height='16'
                        fill='currentColor'
                        viewBox='0 0 16 16'
                        aria-hidden='true'
                      >
                        <path d='M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z' />
                      </svg>
                    </div>
                  </div>
                  <p
                    className={clsx(
                      errors?.password ? '' : 'hidden',
                      'text-xs text-red-600 mt-2'
                    )}
                    id='password-error'
                  >
                    {errors?.password?.message}
                  </p>
                </div>
                <button
                  type='submit'
                  className={clsx(
                    isSubmitting ? 'cursor-not-allowed hover:bg-blue-400' : '',
                    'py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md border border-transparent font-semibold bg-blue-500 text-white hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all text-sm'
                  )}
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <svg
                      className='w-5 h-5 mr-3 -ml-1 text-white animate-spin'
                      xmlns='http://www.w3.org/2000/svg'
                      fill='none'
                      viewBox='0 0 24 24'
                    >
                      <circle
                        className='opacity-25'
                        cx='12'
                        cy='12'
                        r='10'
                        stroke='currentColor'
                        strokeWidth='4'
                      ></circle>
                      <path
                        className='opacity-75'
                        fill='currentColor'
                        d='M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z'
                      ></path>
                    </svg>
                  ) : null}
                  {isSubmitting ? 'Signing in ...' : 'Sign In'}
                </button>
              </div>
            </form>
          </div>
        </Card>
      </main>
    </>
  );
};

export default SigninPage;
